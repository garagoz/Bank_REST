openapi: 3.0.3
info:
  title: Card Management System API
  version: 1.0.0
  description: A comprehensive card management system with authentication, authorization, and secure transactions
  contact:
    name: Card Management Team
    email: support@cardmanagement.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local Development Server
  - url: https://api.cardmanagement.com
    description: Production Server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 1

    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - firstName
        - lastName
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        role:
          type: string
          enum: [USER, ADMIN]

    CardCreateRequest:
      type: object
      properties:
        ownerId:
          type: integer
          format: int64
          description: "Only for admin use - specify card owner"
        expiryDate:
          type: string
          format: date
          description: "Future date, defaults to 3 years from now"
        initialBalance:
          type: number
          format: decimal
          minimum: 0
          description: "Initial card balance, defaults to 0"

    TransferRequest:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
          format: decimal
          minimum: 0.01
        description:
          type: string
          maxLength: 500

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
          default: Bearer
        user:
          $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedCardNumber:
          type: string
          example: "**** **** **** 1234"
        ownerName:
          type: string
        expiryDate:
          type: string
          format: date
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        balance:
          type: number
          format: decimal
        createdAt:
          type: string
          format: date-time

    TransferResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCardMasked:
          type: string
        toCardMasked:
          type: string
        amount:
          type: number
          format: decimal
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
        data:
          type: object

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error or username/email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/cards:
    post:
      tags:
        - Card Management
      summary: Create a new card
      operationId: createCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequest'
      responses:
        '200':
          description: Card created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CardResponse'
        '400':
          description: Validation error
        '403':
          description: Access denied

    get:
      tags:
        - Card Management
      summary: Get user cards with pagination and filtering
      operationId: getUserCards
      parameters:
        - name: status
          in: query
          description: Filter by card status
          required: false
          schema:
            type: string
            enum: [ACTIVE, BLOCKED, EXPIRED]
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort criteria
          required: false
          schema:
            type: string
            default: "createdAt,desc"
      responses:
        '200':
          description: Cards retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          content:
                            type: array
                            items:
                              $ref: '#/components/schemas/CardResponse'
                          totalElements:
                            type: integer
                          totalPages:
                            type: integer
                          size:
                            type: integer
                          number:
                            type: integer

  /api/cards/{id}:
    get:
      tags:
        - Card Management
      summary: Get card by ID
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CardResponse'
        '404':
          description: Card not found
        '403':
          description: Access denied

    delete:
      tags:
        - Card Management
      summary: Delete a card (Admin only)
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Card not found
        '403':
          description: Access denied

  /api/cards/{id}/block:
    put:
      tags:
        - Card Management
      summary: Block a card
      operationId: blockCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card blocked successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CardResponse'
        '404':
          description: Card not found
        '403':
          description: Access denied

  /api/cards/{id}/activate:
    put:
      tags:
        - Card Management
      summary: Activate a card (Admin only)
      operationId: activateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card activated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CardResponse'
        '404':
          description: Card not found
        '403':
          description: Access denied

  /api/cards/transfer:
    post:
      tags:
        - Card Management
      summary: Transfer funds between cards
      operationId: transferFunds
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Transfer completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TransferResponse'
        '400':
          description: Validation error or insufficient funds
        '403':
          description: Access denied

  /api/users:
    get:
      tags:
        - User Management
      summary: Get all users (Admin only)
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          required: false
          schema:
            type: string
            default: "createdAt,desc"
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          content:
                            type: array
                            items:
                              $ref: '#/components/schemas/UserResponse'
                          totalElements:
                            type: integer
                          totalPages:
                            type: integer
        '403':
          description: Access denied

    post:
      tags:
        - User Management
      summary: Create new user (Admin only)
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
        '403':
          description: Access denied

  /api/users/{id}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '403':
          description: Access denied

    put:
      tags:
        - User Management
      summary: Update user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '403':
          description: Access denied

    delete:
      tags:
        - User Management
      summary: Delete user (Admin only)
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
        '403':
          description: Access denied